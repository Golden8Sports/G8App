//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace G8_App.G8AppService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="myTest", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class myTest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NombreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nombre {
            get {
                return this.NombreField;
            }
            set {
                if ((object.ReferenceEquals(this.NombreField, value) != true)) {
                    this.NombreField = value;
                    this.RaisePropertyChanged("Nombre");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="G8AppService.IG8Service")]
    public interface IG8Service {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IG8Service/NuevoTest", ReplyAction="http://tempuri.org/IG8Service/NuevoTestResponse")]
        int NuevoTest(G8_App.G8AppService.myTest a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IG8Service/NuevoTest", ReplyAction="http://tempuri.org/IG8Service/NuevoTestResponse")]
        System.Threading.Tasks.Task<int> NuevoTestAsync(G8_App.G8AppService.myTest a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IG8Service/EditarTest", ReplyAction="http://tempuri.org/IG8Service/EditarTestResponse")]
        int EditarTest(G8_App.G8AppService.myTest a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IG8Service/EditarTest", ReplyAction="http://tempuri.org/IG8Service/EditarTestResponse")]
        System.Threading.Tasks.Task<int> EditarTestAsync(G8_App.G8AppService.myTest a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IG8Service/ListarTest", ReplyAction="http://tempuri.org/IG8Service/ListarTestResponse")]
        G8_App.G8AppService.myTest[] ListarTest(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IG8Service/ListarTest", ReplyAction="http://tempuri.org/IG8Service/ListarTestResponse")]
        System.Threading.Tasks.Task<G8_App.G8AppService.myTest[]> ListarTestAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IG8ServiceChannel : G8_App.G8AppService.IG8Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class G8ServiceClient : System.ServiceModel.ClientBase<G8_App.G8AppService.IG8Service>, G8_App.G8AppService.IG8Service {
        
        public G8ServiceClient() {
        }
        
        public G8ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public G8ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public G8ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public G8ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int NuevoTest(G8_App.G8AppService.myTest a) {
            return base.Channel.NuevoTest(a);
        }
        
        public System.Threading.Tasks.Task<int> NuevoTestAsync(G8_App.G8AppService.myTest a) {
            return base.Channel.NuevoTestAsync(a);
        }
        
        public int EditarTest(G8_App.G8AppService.myTest a) {
            return base.Channel.EditarTest(a);
        }
        
        public System.Threading.Tasks.Task<int> EditarTestAsync(G8_App.G8AppService.myTest a) {
            return base.Channel.EditarTestAsync(a);
        }
        
        public G8_App.G8AppService.myTest[] ListarTest(string id) {
            return base.Channel.ListarTest(id);
        }
        
        public System.Threading.Tasks.Task<G8_App.G8AppService.myTest[]> ListarTestAsync(string id) {
            return base.Channel.ListarTestAsync(id);
        }
    }
}
